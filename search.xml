<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件包含漏洞</title>
      <link href="/2022/04/24/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/04/24/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h5 id="文件包含简介"><a href="#文件包含简介" class="headerlink" title="文件包含简介"></a>文件包含简介</h5><p>服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP来执行，这会为开发者节省大量的时间。这意味着您可以创建供所有网页引用的标准页眉或菜单文件。当页眉需要更新时，您只更新一个包含文件就可以了，或者当您向网站添加一张新页面时，仅仅需要修改一下菜单文件。<br>简单一句话就是：为了更好的使用代码的重用性，引入了文件包含函数，可以通过文件包含函数将文件包含进来，直接使用包含文件的代码。</p><h3 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h3><p>PHP中文件包含函数有以下四种：</p><blockquote><p>require()<br>require_once()<br>include()<br>include_once()</p></blockquote><p>include和require区别主要是，include在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而require函数出现错误的时候，会直接报错并退出程序的执行。</p><p>而include_once()，require_once()这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</p><h3 id="漏洞产生的原因"><a href="#漏洞产生的原因" class="headerlink" title="漏洞产生的原因"></a>漏洞产生的原因</h3><p>在包含文件的时候，为了灵活的包含文件，将被包含文件h设置为变量，通过动态变量来引入需要包含的文件时，用户可以对变量的值可控而服务器端未对变量值进行合理的校验或者校验被找过，这样就导致了文件包含漏洞。通常文件包含漏洞都出现在PHP原因中。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$filename</span>  <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件包含函数：-读取文件和文件执行"><a href="#文件包含函数：-读取文件和文件执行" class="headerlink" title="文件包含函数：(读取文件和文件执行)"></a>文件包含函数：(读取文件和文件执行)</h3><h3 id="LFI题目"><a href="#LFI题目" class="headerlink" title="LFI题目"></a>LFI题目</h3><h5 id="lfi-1"><a href="#lfi-1" class="headerlink" title="lfi-1"></a>lfi-1</h5><p>先看一下题目后台的源码，稍稍分析一下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"../common/header.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token delimiter">?></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!-- from https://pentesterlab.com/exercises/php_include_and_post_exploitation/course --></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">hint</span><span class="token punctuation">(</span><span class="token string">"will include the arg specified in the GET parameter \"page\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/LFI-1/index.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"page"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>form语句是去请求  index.php 方法是 get<br>接受一个参数，叫 page<br>最后接收配置参数 pade ，之后直接 include </p><p>include 就是函数体里包含一些敏感文件的话，就会把这些敏感文件显示出来，造成文件泄露。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（六）方法基础</title>
      <link href="/2022/04/24/Java%EF%BC%88%E5%85%AD%EF%BC%89%E6%96%B9%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/04/24/Java%EF%BC%88%E5%85%AD%EF%BC%89%E6%96%B9%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="方法基础"><a href="#方法基础" class="headerlink" title="方法基础"></a>方法基础</h2><h3 id="方法的引入"><a href="#方法的引入" class="headerlink" title="方法的引入"></a>方法的引入</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 需求1：编写程序计算 10 和  20 的和，并输出结果</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 需求2：666 和 888 的和，并输出结果</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">888</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            以上需求代码相似实质是以一个需求，功能相同            只不过每次参与的数据不同            * 在 Java中应当有一种机制：                - 某种功能的代码只需要使用一次                - 功能间的交互，只需要传入具体数据，即可得到结果            这样的代码就可以重复利用，提高代码复用性            使用这种方法我们称为【调用/invoke】        */</span>        <span class="token comment" spellcheck="true">// 【调用/invoke】 sumInt方法</span>        MethodTest<span class="token punctuation">.</span><span class="token function">sumInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MethodTest<span class="token punctuation">.</span><span class="token function">sumInt</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">,</span> <span class="token number">888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 效果与前面代码相同</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 单独定义一个方法【暂时不解释方法语法】</span>    <span class="token comment" spellcheck="true">// 作用：完成计算两个int类型数据的和，并输出结果</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sumInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>java的方法也就相当于c语言中的函数<br>java方法是语句的集合，它们在一起执行一个功能</p><ul><li>方法包含于类体当中定义，一个类体中可以定多多个方法</li><li>方法体中不可以定义方法</li><li>方法体由Java语句构成</li><li>方法是解决某一类问题的有序组合【自上而下】</li><li>方法在程序中被创建，在其他地方被引用</li><li>只有被【调用&#x2F;invoke】时，才会执行</li></ul><h3 id="方法的语法"><a href="#方法的语法" class="headerlink" title="方法的语法"></a>方法的语法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> 返回值类型 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    方法体    <span class="token punctuation">[</span><span class="token keyword">return</span> 返回值<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//注意中括号中的内容可选</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>[return 返回值;] 如果没有，返回值类型为 void</p><p>只要是数据就有数据类型，所以 返回值 与 返回值类型 必须一致</p><hr><p><strong>语法结构解释：</strong></p><ul><li>修饰符列表<br>可选，不是必要<br>告诉编译器如何调用该方法，定义了该方法的访问类型<br>目前统一写为：public static<br>修饰符列表有 static 关键字调用格式：类名.方法名(实参列表);<br>实参列表：你根据实际想要传让的数据</li><li>返回值类型<br>一个方法是可以完成某一个特定功能的，这个功能结束之后大多数都需要返回最终执行的结果<br>返回值类型程序员需要根据实际方法制定<br>方法可能会没有返回值，当方法没有返回值时返回值类型是 void 同时不可以有 返回值，但可以编写 return ;</li><li>方法名<br>满足标识符要求即可，最好见名知意<br>方法名使用小驼峰命名法，首个词最好是动词</li><li>参数列表：内包含形参<br>形参是局部变量：int a; double b; float c; String args; …<br>形参数量：0 ~ N<br>多个形参之间使用 ; 分隔<br>形参中起决定性作用的是形参的数据类型，形参的名字只是局部变量的名字<br>方法【调用&#x2F;invoke】时，实际给方法传递的真实数据，被称作【实参】<br>形参列表与实参列表需要数据类型对应，数量对应</li><li>方法体<br>方法体必须由大括号括起来<br>方法体包含具体的Java语句，语句有逻辑顺序【自上而下】</li><li>只要带有 return 关键字的语句执行，则 return 所在的方法强制结束</li></ul><p><strong>假设</strong>：你想象你要办一个工厂</p><ul><li>参数列表就是是你提供原料【但你还不知道具体的数值】</li><li>返回值类型就是你想要生成个什么【先规定个类型型号】</li><li>返回值就是工厂实物产出，当然也可能没有出货</li><li>方法名就是你要办工厂的名字</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// public 表示公开的</span><span class="token comment" spellcheck="true">// class 表示定义类</span><span class="token comment" spellcheck="true">// Test02 一个类名</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里 类体</span>    <span class="token comment" spellcheck="true">// 类体中不能直接编写Java语句，除说明变量</span>    <span class="token comment" spellcheck="true">// 下面是一个方法</span>    <span class="token comment" spellcheck="true">// public 表示公开的</span>    <span class="token comment" spellcheck="true">// static 表示静态的</span>    <span class="token comment" spellcheck="true">// void 表示方法执行结束后没有数据返回</span>    <span class="token comment" spellcheck="true">// main 一个特殊的方法名【主方法】</span>    <span class="token comment" spellcheck="true">// (String[] args) ：形式参数列表，其中String[]是一种数据类型【字符串】，args是一个局部变量的变量名</span>    <span class="token comment" spellcheck="true">// 主方法的编写是固定的，因为这是 SUN公司 所规定的，表示程序的入口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里 方法体</span>        <span class="token keyword">int</span> num<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用方法sumInt()的计算10 和 20求和并输出结果，返回求和</span>        num <span class="token operator">=</span> MethodTest02<span class="token punctuation">.</span><span class="token function">sumInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// (10, 20) 是实参列表</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从方法中返回的和：  "</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 再次调用</span>        num <span class="token operator">=</span> MethodTest02<span class="token punctuation">.</span><span class="token function">sumInt</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// (num, 10) 是实参列表</span>        MethodTest02<span class="token punctuation">.</span><span class="token function">sumInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回值的接收与否可以根据情况选择</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 下面是一个自定义的方法</span>    <span class="token comment" spellcheck="true">// 方法作用：计算两个int数据的和，输出计算结果并返回和</span>    <span class="token comment" spellcheck="true">// 写一个方法之前需要进行规划</span>    <span class="token comment" spellcheck="true">// 修饰符类型：public static</span>    <span class="token comment" spellcheck="true">// 方法名：sum  求和的意思</span>    <span class="token comment" spellcheck="true">// 形式参数列表：(int a, int b) 要求是两个int数据</span>    <span class="token comment" spellcheck="true">// 返回值类型：int  返回值是两个int数据的和，计算后的和仍旧是int</span>    <span class="token comment" spellcheck="true">// 方法体：主要是求和，输出计算结果并返回和</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sumInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// (int a, int b) 是形参列表</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用方法sumInt的输出： "</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    方法调用*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用方法</span>        Test03<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对于方法的修饰符列表当中有static关键字： “类名.”可以省略</span>        <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用其他类【不是本类中的】方法</span>        A<span class="token punctuation">.</span><span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 测试省略</span>        <span class="token comment" spellcheck="true">// doOther();   编译报错</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m method execute !"</span><span class="token punctuation">)</span>        <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 在本类中，编译通过</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2 method execute !"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A's doOther method invoke !"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// m2();    报错 m2()方法 不在 类A 中不能直接调用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>注意</strong>：Java的方法在同一个类中调用，可以省略 类名.</li></ul><h3 id="方法的执行"><a href="#方法的执行" class="headerlink" title="方法的执行"></a>方法的执行</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test04</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// main暂定等待m1执行完毕，进入m1</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1 begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// m1暂定m2执行完毕，进入m2</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1 over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2 begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2 over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*     结果分析：        main begin        m1 begin        m2 begin        m2 over        m1 over        main over    main方法最先调用，main方法也是最后结束    最后调用的是m2方法，该方法最先结束*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li>方法中的代码是自上而下的顺序执行即可</li><li>当前程序没有结束，下一行代码是无法执行</li></ul><p><strong>return语句相关</strong></p><ul><li>带有return关键字的java语句只要执行，那么所在方法结束</li><li>在“同一作用域”当中，return语句下面不能编写的任何代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test05</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// hi;  报错，方法带括号</span>        <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     public static int m(int a)    {        if (a > 10)        {            return 1;        }    }     编译器报错：缺少返回语句，    程序无法保证 "return 1;" 百分之百会执行    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 作用域 if</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 作用域 else</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 作用域 if</span>            <span class="token comment" spellcheck="true">// System.out.println("Hello"); 报错</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 通过</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>返回值类型中是void的方法当中使用 return ;</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test05</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不是终止for循环，是终止 m() 方法</span>                <span class="token comment" spellcheck="true">// 区别 break; 是终止for循环</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i --> "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于JVM的内存分配问题"><a href="#关于JVM的内存分配问题" class="headerlink" title="关于JVM的内存分配问题"></a>关于JVM的内存分配问题</h3><ul><li><p>方法只是定义，不调用，是不会执行的；JVM 中也不会给该方法分配“运行所属”的内存空间</p></li><li><p>在JVM内存划分有三块主要的内存空间（除此之外还有）：<br>                 方法区内存<br>                 堆内存<br>                 栈内存</p></li><li><p>关于栈数据结构：<br>                 栈：stack，是一种数据结构<br>                 数据结构反应是数据的存储形态<br>                 数据结构是独立的学科，不属于任何编程语言的范畴<br>                 作为程序员需要提前精通：数据结构 + 算法【计算机专业必修】<br>                 常见数据结构：<br>                                       数组<br>                                       队列<br>                                      栈<br>                                      二叉树<br>                                      哈希表<br>                                      . . . . . .</p></li><li><p>关于【栈&#x2F;Stack】<br>     基础成分：栈顶元素，栈底元素，栈帧<br>     栈帧永远指向栈顶元素<br>                栈顶元素处于活跃状态，其它元素静止<br>                术语：<br>                                      压栈&#x2F;入栈&#x2F;push<br>                                      弹栈&#x2F;出栈&#x2F;pop<br>                栈数据结构存储数据的特点是；<br>                                      先入后出<br>                                      后入先出</p></li><li><p>方法代码片段存在哪里？方法执行的时候执行过程的内存在哪里分配<br>                方法代码片段属于.calss字节码文件的一部分，字节码文件在类加载的时候，将其存放在方法区当中。所以JVM中的三块主要内存空间中方法区内存最先有数据。存放了代码片段。<br>                代码片段虽然在方法区内存当中只有一份，但是可以被重复调用。每一次调用这个方法的时候，需要给该方法分配独立的活动场所，在栈内存中分配。【栈内存中分配方法运行的所属内存空间】</p></li></ul><p>描述：方法在调用的瞬间，会给该方法分配内存空间，会在栈中会发生压栈动作，方法执行结束之后，给该方法分配的内存空间全部释放，此时发生弹栈动作<br>                                压栈：给方法分配内存<br>                                弹栈：释放该方法的内存空间</p><ul><li>局部变量在方法体在声明，局部变量在运行阶段内存在栈中分配<br>可以解释为什么局部变量生命周期最短，出了大括号就无法使用，因为方法结束后，进行弹栈释放该方法的内存空间，局部变量同样随方法一同释放<br>结合栈回顾前面方法程序执行示例v</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（五）</title>
      <link href="/2022/04/18/Java%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2022/04/18/Java%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for循环语句是最常用的循环语句，一般用在循环次数已知的情况下。</p><ul><li><p>语法格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始表达式<span class="token punctuation">;</span> 布尔表达式<span class="token punctuation">;</span> 更新表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>  循环体<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行原理：<br>初始化表达式，循环条件，更新表达式都不是必须的；（两个分号是必须的）<br>初始化表达式最先执行，并且在整个for循环当中只执行一次<br>循环条件必须是布尔表达式，结果只有true和false两种情况</p></li><li><p>执行过程：<br>最先执行初识表达式，（只执行一次）<br>判断布尔表达式的结果<br>若为true则执行循环体<br>执行更新表达式<br>判断布尔表达式的结果<br>······<br>直到布尔表达式的结果为false是，循环结束</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义变量sum，用于累加</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// i的值会在1~4之间变化</span>      <span class="token punctuation">{</span>           sum <span class="token operator">+=</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实现sum与i的累加</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum = "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印累加的和，输出结果：sum = 10</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3></li><li><p>语法结构：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>  循环体<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行原理：</p></li><li><pre class="line-numbers language-java"><code class="language-java">  <span class="token operator">-</span> 判断布尔表达式      <span class="token operator">-</span> <span class="token boolean">true</span> 执行循环体          <span class="token operator">-</span> 判断布尔表达式              <span class="token operator">-</span> <span class="token boolean">true</span> 执行循环体                  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>              <span class="token operator">-</span> <span class="token boolean">false</span> 结束循环      <span class="token operator">-</span> <span class="token boolean">false</span> 结束循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意while循环可能一次都不执行</p></li><li><p>无限循环</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无限循环中···"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意在无限循环语句后面的语句永远无法执行到，一次编译器可能会报错</p><h3 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do..while语句"></a>do..while语句</h3></li><li><p>语法格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">do</span>  <span class="token punctuation">{</span>  循环语句<span class="token punctuation">;</span>  ······  <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行过程：</p></li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token operator">-</span> 执行<span class="token keyword">do</span>内循环体        <span class="token operator">-</span> 判断布尔表达式            <span class="token operator">-</span> <span class="token boolean">true</span>                <span class="token operator">-</span> 执行<span class="token keyword">do</span>内循环体                    <span class="token operator">-</span> 判断布尔表达式                            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token operator">-</span> <span class="token boolean">false</span> 循环结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>do .. while 循环先执行do内的循环体，因此至少会执行一次</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test04</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h3><h5 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h5><ul><li><p>break 是Java语句当中的关键字，被翻译成“中断&#x2F;折断”</p></li><li><p>break 使用在其后添加 ;，即可单独成为一个完整的Java语句</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块</p></li><li><p>在循环中当满足某些条件，就不需要执行后续内容，可以使用 break 跳出循环提高程序效率</p></li><li><p>break 跳出最里层的循环，并且继续执行该循环下面的语句（默认只是当前层的循环）</p></li><li><p>跳出指定循环</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">break</span> 循环名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test05</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i -> "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------跳出当前的循环-----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跳出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 只是跳出当前的循环</span>              <span class="token punctuation">}</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i -> "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  end  j -> "</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------跳出指定循环-------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// for1 和 for2 是为循环命名</span>      for1<span class="token operator">:</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          for2<span class="token operator">:</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跳出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span> for1<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 跳出指定循环for1的循环</span>              <span class="token punctuation">}</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i -> "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  end  j -> "</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h5></li><li><p>continue 表示：继续&#x2F;go on&#x2F;下一个</p></li><li><p>语法格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">continue</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>continue 适用于任何循环控制结构中，作用是让程序立刻跳转到下一次循环的迭代</p></li><li><p>在 for 循环中，continue 语句使程序立即跳转到更新语句</p></li><li><p>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句<br>示例：<br>&#96;&#96;&#96;java<br>public class Test06<br>{<br>  public static void main(String[] args)<br>  {</p><pre><code>  // continue 和 break 区别  System.out.println(&quot;------continue------&quot;);  for(int i = 0; i &lt; 5; i++)  &#123;      if(i == 1)      &#123;          continue;      &#125;      System.out.println(&quot;i --&gt; &quot; + i);  &#125;  System.out.println(&quot;------break------&quot;);  for(int i = 0; i &lt; 5; i++)  &#123;      if(i == 1)      &#123;          break;      &#125;      System.out.println(&quot;i --&gt; &quot; + i);  &#125;    System.out.println(&quot;-----------------------&quot;);    // continue 也可以跳指定循环  System.out.println(&quot;------默认------&quot;);  for1: for(int i = 0; i &lt; 5; i++)  &#123;      for2: for(int j = 0; j &lt; 5; j++)      &#123;          if(j == 1)          &#123;          System.out.println(&quot;跳出&quot;);          continue;  // 默认          &#125;          System.out.print(&quot;i --&gt; &quot; + i);          System.out.println(&quot;  end  j --&gt; &quot; + j);      &#125;  &#125;  System.out.println(&quot;------指定循环------&quot;);  for1: for(int i = 0; i &lt; 5; i++)  &#123;      for2: for(int j = 0; j &lt; 5; j++)      &#123;          if(j == 1)          &#123;          System.out.println(&quot;跳出&quot;);          continue for1;  // 跳指定循环for1          &#125;          System.out.print(&quot;i --&gt; &quot; + i);          System.out.println(&quot;  end  j --&gt; &quot; + j);      &#125;  &#125;</code></pre><p>  }</p></li></ul><p>}<br>&#96;&#96;&#96;</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（四）运算符</title>
      <link href="/2022/04/12/Java%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2022/04/12/Java%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><table><thead><tr><th>+</th><th>-</th><th>*</th><th>&#x2F;</th><th>%</th><th>++</th><th>–</th></tr></thead><tbody><tr><td>求和</td><td>求差</td><td>求乘积</td><td>求商</td><td>求余数</td><td>自加1</td><td>自减1</td></tr></tbody></table><ul><li>注意：运算符有优先级，在一个表达式中，可以通过添加括号的方式来提升运算符的优先级</li></ul><hr><p>关于加减乘除取余的简单栗子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">One01</span><span class="token punctuation">{</span>    publc <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：13</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：7</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：30</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">/</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：3</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">%</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>像++和–属于<font color=red>单目运算符</font>，可以出现在单个变量后面或前面，对其进行算数运算</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>k <span class="token operator">++</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：11</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">++</span> y<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：11</span><span class="token comment" spellcheck="true">//++出现在变量后：</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意先算 b = ，再算 a ++</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：100</span><span class="token comment" spellcheck="true">//++出现在变量前：</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token operator">++</span> m<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意先算 m ++ ，再算 n = </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：11</span><span class="token comment" spellcheck="true">//变形（与上面的同一原理）</span><span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：10</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><table><thead><tr><th>&gt;</th><th>&gt;&#x3D;</th><th>&lt;</th><th>&lt;&#x3D;</th><th>&#x3D;&#x3D;</th><th>!&#x3D;</th></tr></thead><tbody><tr><td>大于</td><td>大于等于</td><td>小于</td><td>小于等于</td><td>等于</td><td>不等于</td></tr></tbody></table><ul><li>注意：<br>&#x3D; 是赋值运算符<br>&#x3D;&#x3D; 是关系运算符<br>关系运算符结果一定是布尔类型：true &#x2F; false</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：flase</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><pre><code>- 逻辑与        &amp;- 逻辑或        |- 逻辑非        !- 逻辑异或        ^（相同为假，不同为真）- 短路与        &amp;&amp;- 短路或        ||</code></pre><ul><li>注意：<br>1、逻辑运算符要求两边的算子都是布尔类型，并且逻辑运算符最终的运算结果也是一个布尔类型<br>2、短路与和逻辑与的运算结果是相同的，只不过短路与存在短路现象<br>3、短路或和逻辑或的运算结果是相同的，只不过短路或存在短路现象</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//逻辑与</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> x <span class="token operator">&lt;</span> y <span class="token operator">&amp;</span> <span class="token operator">++</span>x <span class="token operator">&lt;</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与运算前面为假则全为假，但是对于逻辑与则要计算两个算子</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：101</span><span class="token comment" spellcheck="true">//短路与</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> x <span class="token operator">&lt;</span> y <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>x <span class="token operator">&lt;</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与运算前面为假则全为假，但是对于短路与得到结果就不会计算后面的算子了</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果为：100</span><span class="token comment" spellcheck="true">/*从某个角度看，短路与不运行后面的代码，可以提高执行效率但对于某些特殊的业务逻辑当中，要求运算符两边的算子必须全部执行，此时必须使用逻辑与。*/</span><span class="token comment" spellcheck="true">//逻辑或和短路或也是相同的原理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（三）数据类型补充</title>
      <link href="/2022/04/10/Java%EF%BC%88%E4%B8%89%EF%BC%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%A1%A5%E5%85%85/"/>
      <url>/2022/04/10/Java%EF%BC%88%E4%B8%89%EF%BC%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h4 id="整数型"><a href="#整数型" class="headerlink" title="整数型"></a>整数型</h4><table><thead><tr><th>数据类型</th><th>占用空间大小</th><th>默认值</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>0</td><td>[-128~127]</td></tr><tr><td>short</td><td>2</td><td>0</td><td>[-32768~32767]</td></tr><tr><td>int</td><td>4</td><td>0</td><td>[-2147483648~2147483647]</td></tr><tr><td>long</td><td>8</td><td>0L</td><td></td></tr></tbody></table><p>1、java语言当中的“整数型字面值”被默认当做int类型来处理。要让这个“整数型字面值”被当做long类型执行的话，需要在“整数型在面试”后面添加l&#x2F;L，建议用大写的L<br>2、java语言当中的整数型字面值有三种表示方式：<br>    第一种：十进制【默认的方式】<br>    第二种：八进制【在编写八进制整数型字面值的时候需要以0开始】<br>    第三种：十六进制【在编写十六进制整数型字面值的时候余姚以0x开始】</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">010</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//整数型字面值以0开头的，一般表示八进制</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//整数型字面值以0x开头的，一般表示十六进制</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出10</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出8</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意：输出的时候都是以十进制的形式<br>&#96;&#96;&#96;java<br>int i &#x3D; 123;<br>&#x2F;&#x2F;整数型字面值123和变量i都是int类型<br>&#x2F;&#x2F;将int类型的123赋值给int类型的变量i，不存在类型转换<br>System.out.println(i);<br>long x &#x3D; 456;<br>&#x2F;&#x2F;整数型字面值456赋值给long类型的x，存在类型转换<br>&#x2F;&#x2F;int类型占4个字节，long占8个字节<br>&#x2F;&#x2F;小容量可以自动转换成大容量，称为自动类型转换机制。<br>System.out.println(x);<br>long y &#x3D; 2147483647;<br>System.out.println(y);&#x2F;&#x2F;运行正确<br>&#x2F;*<br>long z &#x3D; 214748648;&#x2F;&#x2F;214748648被当做int字节处理，但是其字面值超出int类型范围<br>System.out.println(z);&#x2F;&#x2F;运行错误</li></ul><p>*&#x2F;<br>&#x2F;&#x2F;解决办法：将其当做long类型处理，在字面值后面面添加L<br>long z &#x3D; 214748648;<br>System.out.println(z);&#x2F;&#x2F;不存在类型转换，运行正确</p><pre><code>* 大容量不能直接转换成小容量，需要加上“强制类型转换符”，但是这样可能会造成精度损失。```javalong k = 2147483648L;int  e = (int)k;System.out.println(e);//结果为-2147483648，损失精度非常严重</code></pre><ul><li>强转原理：<br>例如：8个字节的int类型转换成4个字节的long就是将int类型的左边的4个字节删掉，就会得到4个字节的long类型。</li><li>特例：<br><font color = red>当一个字面值不超过byte、short、char类型的取值范围，这个字面值可以直接转换成对应的类型。</font><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//举例</span><span class="token keyword">byte</span> a1 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>运行正确<span class="token keyword">byte</span> a2 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>运行错误，需要在<span class="token number">128</span>前面加强制类型转换符<span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">,</span>编译会损失精度转换之后输出a2是<span class="token operator">-</span><span class="token number">128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>精度损失<br>计算机在存储数据是都是存的补码，输出是将补码转换成原码，</li><li>求给定数值的补码<br>正数：<br>正整数的补码与原码相同<br>负数：<br>将其对应正数的二进制所有位取反后加1<h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><table><thead><tr><th>float</th><th>单精度</th><th>4个字节</th></tr></thead><tbody><tr><td>double</td><td>双精度</td><td>8个字节</td></tr></tbody></table></li><li>注意：double 和 float 在计算机内部二进制储存的时候都是储存的浸近似值（无法储存无限的小数）</li></ul><p>在java语言中所有的浮点型字面值，默认被当做double类型来处理，要想该字面值当做float类型来处理，需要在字面值的后面添加F&#x2F;f</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">double</span> b1 <span class="token operator">=</span> <span class="token number">3.0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不存在类型转换，编译正确</span><span class="token keyword">float</span> b2 <span class="token operator">=</span> <span class="token number">4.0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译错误</span><span class="token comment" spellcheck="true">//修改错误有以下两种方法</span><span class="token keyword">float</span> b3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token number">4.0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//强制转换</span><span class="token keyword">float</span> b4 <span class="token operator">=</span> <span class="token number">4.0f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不存在类型转换，4.0就是flaot类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><table><thead><tr><th>booolean：</th><th>true</th><th>false</th></tr></thead><tbody><tr><td>底层储存</td><td>1</td><td>0</td></tr></tbody></table><p>布尔类型占用一个字节，但是在实际开发中非常重要，经常使用在逻辑运算和条件控制语句中。</p><h4 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h4><p>关于基本数据类型之间的互相转换：</p><ol><li>八种基本数据类型当中除了布尔类型之外剩下的7种类型之间都可以互相转换</li><li>小容量向大容量转换，称为自动类型转换<br>        容量从小到大排序为：<br>        byte &lt; short &lt; int &lt; long &lt; float &lt; double<br>        注意：任何浮点类型不管占用多少个字节，都比整数型容量大<br>        char和short可以表示的种类数量相同，但是char可以取更大的正整数</li><li>大容量向小容量转换，叫做强制类型转换，需要加强制类型转换符，运行阶段可能会损失精度，谨慎使用</li><li>当整数字面值没有超过byte、short、char类型的取值范围，这个字面值可以直接赋值给byte、short、char类型的变量。</li><li>byte、short、char混合运算的时候，各自先转换成int类型在做运算。</li><li>多种数据类型混合运算，先转换成容量最大的那种类型再做运算。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf（vip限免）WP</title>
      <link href="/2022/04/09/ctf%EF%BC%88vip%E9%99%90%E5%85%8D%EF%BC%89WP/"/>
      <url>/2022/04/09/ctf%EF%BC%88vip%E9%99%90%E5%85%8D%EF%BC%89WP/</url>
      
        <content type="html"><![CDATA[<h2 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h2><p>看题就是要我们看源码，在浏览器里 Ctrl + U 直接查看网页源码，这里也是可以直接看到flag</p><p><img src="https://img-blog.csdnimg.cn/cb7b532e92b249ec8e4f8f7d705884ba.png"></p><h2 id="前台JS绕过"><a href="#前台JS绕过" class="headerlink" title="前台JS绕过"></a>前台JS绕过</h2><p>这个题就是不能用F12进行查看源码了，我们的 Ctrl + U 还是可以用的，直接可以得到flag</p><p><img src="https://img-blog.csdnimg.cn/dc3a5f5b88244e95b2a8cb668b60715b.png"></p><h2 id="协议头信息泄露"><a href="#协议头信息泄露" class="headerlink" title="协议头信息泄露"></a>协议头信息泄露</h2><p>题目提示要我们抓包，那就抓，抓完这样，什么也没看到</p><p><img src="https://img-blog.csdnimg.cn/e5b754dd872a4c709b9613b1bfb6999e.png"></p><p>上网搜搜原来是要查看响应头，才能得到flag，记录一下查看步骤，一免以后忘记</p><p>先点图示位置</p><p><img src="https://img-blog.csdnimg.cn/311432001e6e4e3e840b659851d214bb.png"></p><p>这里点击 Repeater 再点 Go ，就可以在右边看到flag</p><p><img src="https://img-blog.csdnimg.cn/28c19fc2d7554aa583fbefc24d642b4e.png"></p><h2 id="robots后台泄露"><a href="#robots后台泄露" class="headerlink" title="robots后台泄露"></a>robots后台泄露</h2><p>robots之前做过，就是在网站后面加上 &#x2F;robots.txt 看他的目录，就可以得到flag</p><p><img src="https://img-blog.csdnimg.cn/831b09588f794424a483c375fa051a1e.png"></p><p><img src="https://img-blog.csdnimg.cn/a8d9769d48f0477691a1e763069f8205.png"></p><h2 id="phps源码泄露"><a href="#phps源码泄露" class="headerlink" title="phps源码泄露"></a>phps源码泄露</h2><p>上网搜phps源码大概知道了phps文件就是php的源码文件，通常用于提供给用户查看php代码，但是因为用户无法直接通过Web浏览器查看php文件的内容，所以用phps文件代替。大概就是要我们查看phps文件所以直接在网址后面加 &#x2F;index.phps ，下载phps文件后打开，可以看到fag</p><p><img src="https://img-blog.csdnimg.cn/97ea6482b4aa47c3a2c08379c3e1b23e.png"><br><img src="https://img-blog.csdnimg.cn/357a9d50b1c14dbbbfd4591ce65d4764.png"></p><h2 id="源码压缩包泄露"><a href="#源码压缩包泄露" class="headerlink" title="源码压缩包泄露"></a>源码压缩包泄露</h2><p>访问 <a href="http://www.zip/">www.zip</a><br>得到一个压缩包，<br>看到一个flag，提交后提示错误，肯定是假的。又看了第二个文件，里面也没有flag，但是我们可以看到信息，关于flag的</p><p><img src="https://img-blog.csdnimg.cn/e2186592924e449e8d81efd50e6763c3.png"></p><p>那么就直接访问fl000g.txt得到flag</p><p><img src="https://img-blog.csdnimg.cn/f97c4274e23a4c5c96d03dc1a21589c3.png"></p><h2 id="版本控制泄露源码"><a href="#版本控制泄露源码" class="headerlink" title="版本控制泄露源码"></a>版本控制泄露源码</h2><p>不知道这是啥，搜到的大概是这样</p><p><img src="https://img-blog.csdnimg.cn/b8079cb4a9f84084ad4fa08824d8e661.png"></p><p>就访问.git看看，直接得到flag</p><p><img src="https://img-blog.csdnimg.cn/ac0c7731ebee4c729a51b90f1984420e.png"></p><h2 id="版本控制泄露源码2"><a href="#版本控制泄露源码2" class="headerlink" title="版本控制泄露源码2"></a>版本控制泄露源码2</h2><p>这次访问.git 发现并没有得到flag ，那就试试.svn居然又得到flag了</p><p><img src="https://img-blog.csdnimg.cn/e318bbbbc2164a3b9c3d4101c718e98d.png"></p><h2 id="vim临时文件泄露"><a href="#vim临时文件泄露" class="headerlink" title="vim临时文件泄露"></a>vim临时文件泄露</h2><p>搜vim临时文件得知</p><ul><li>Vim是从 vi 发展出来的文本编译器。</li></ul><p>看这个题的描述应该是有个什么文件的，需要我们去找一下。<br>搜集到的信息大概就是：</p><ul><li>vim意外退出的话，再次打开该文件就会提示存在一个.swp的隐藏文件，意味着该文件正在被编辑。</li></ul><p>所以我们访问index.php.swp就可以得到flag了<br><img src="https://img-blog.csdnimg.cn/c43b81871c7940efa4a56fb7bb2c2985.png"><br><img src="https://img-blog.csdnimg.cn/e1f272e8a5d04094a7755f04519adac3.png"></p><h2 id="cookie泄露"><a href="#cookie泄露" class="headerlink" title="cookie泄露"></a>cookie泄露</h2><p>抓包直接可以看到flag</p><p><img src="https://img-blog.csdnimg.cn/47734964fa4c48298b4fb750b6934dd8.png"></p><h2 id="域名txt记录泄露"><a href="#域名txt记录泄露" class="headerlink" title="域名txt记录泄露"></a>域名txt记录泄露</h2><p>在网上找个<a href="http://www.jsons.cn/nslookup/">在线域名解析</a>，解析后得到flag</p><h2 id="敏感信息公布"><a href="#敏感信息公布" class="headerlink" title="敏感信息公布"></a>敏感信息公布</h2><p>打开网站，访问 &#x2F;admin 弹出登陆窗口，根据题目的提示 大致就是，密码在页面上，看到最下面的手机号试试</p><p><img src="https://img-blog.csdnimg.cn/b182577567d84f9caafb518a9ac2c656.png"></p><p>登陆成功后就可以看到flag了</p><p><img src="https://img-blog.csdnimg.cn/7aad46c2ddb547eaad65fb6a8ce6290b.png"></p><h2 id="内部技术文档泄露"><a href="#内部技术文档泄露" class="headerlink" title="内部技术文档泄露"></a>内部技术文档泄露</h2><p>打开网站，题目是关于文档的，就找关于文档的东西，在最下面可以看到document，直接点进去</p><p><img src="https://img-blog.csdnimg.cn/47d1756ef9ac47749d9fd60098a134ba.png"><br>根据上面的后台地址，得知我们要访问 &#x2F;system1103&#x2F;login.php 来登陆，输入正确的账号密码就可以得到flag了</p><p><img src="https://img-blog.csdnimg.cn/70737f3db9a842f1852fc5c5e8a3eeb4.png"></p><h2 id="编辑器配置不当"><a href="#编辑器配置不当" class="headerlink" title="编辑器配置不当"></a>编辑器配置不当</h2><p>根据提示访问 &#x2F;editor&#x2F; 得到下图</p><p><img src="https://img-blog.csdnimg.cn/003ab1c1144f48c4a0c5eb0c14059809.png"></p><p>点击插入文件，在文件空间里找到fl000g.txt</p><p><img src="https://img-blog.csdnimg.cn/fa1d301ed1024c1db8fd1cca62aa567a.png"></p><p>随后访问路径</p><p><img src="https://img-blog.csdnimg.cn/5586380025084f0c9ea03b4547c269ce.png"></p><p>也就是 &#x2F;nothinghere&#x2F;fl000g.txt 就可以得到flag</p><h2 id="密码逻辑脆弱"><a href="#密码逻辑脆弱" class="headerlink" title="密码逻辑脆弱"></a>密码逻辑脆弱</h2><p>尝试访问 &#x2F;admin之后发现我们不知道密码，但是还可以看到下面有一个忘记密码的选项，点进去让我们输入他所在的城市，想到网站最下面有一个QQ邮箱，其实就是去搜一下那个QQ就可以看到一个地点了</p><p><img src="https://img-blog.csdnimg.cn/e174562ea50344a28453e4fe6747d1c2.png"></p><p>输入之后就得到了新的密码</p><p><img src="https://img-blog.csdnimg.cn/833b6d64dc024382a4258bda2f3e900c.png"></p><p>那么账号自然是 admin 了，一般情况下，都是，除非注明了。</p><p>接下来就只需要重新登陆，这样就可以得到flag</p><h2 id="探针泄露"><a href="#探针泄露" class="headerlink" title="探针泄露"></a>探针泄露</h2><p>访问 &#x2F;tz.php 接着点击图示位置</p><p><img src="https://img-blog.csdnimg.cn/523a476a8f474be39eadd446eac7a7dc.png"></p><p>然后就是疯狂寻找，就可以找到flag了</p><p><img src="https://img-blog.csdnimg.cn/8533f8c0f3eb466fa5b82523c810a226.png"></p><h2 id="CDN穿透"><a href="#CDN穿透" class="headerlink" title="CDN穿透"></a>CDN穿透</h2><p>了解一下CND</p><p><img src="https://img-blog.csdnimg.cn/f6bec30876064efe9b82282e2de4a01d.png"></p><p>大致就是存在CND的网站我们不能直接查询得到其ip地址</p><p>网上找的方法是直接在cmd 操作窗口ping <a href="http://www.ctfshow.com/">www.ctfshow.com</a> 就可以得到flag 了</p><h2 id="js敏感信息泄露"><a href="#js敏感信息泄露" class="headerlink" title="js敏感信息泄露"></a>js敏感信息泄露</h2><p>访问110.php得到flag</p><p><img src="https://img-blog.csdnimg.cn/e260157062ed44cd8aa7feac7f512ba6.png"></p><h2 id="前端密钥泄露"><a href="#前端密钥泄露" class="headerlink" title="前端密钥泄露"></a>前端密钥泄露</h2><p>首先查看源码找到并且赋值图示秘钥</p><p><img src="https://img-blog.csdnimg.cn/314546e2a1a548a19fdc271f21169b47.png"></p><p>然后直接抓包，进行post传值得到flag，具体步骤看下图</p><p><img src="https://img-blog.csdnimg.cn/b4aecb6473a84cb0a2be84f8091c26bd.png"></p><p>对pazzword赋值，就是前面那个秘钥，并点击Go得到flag</p><p><img src="https://img-blog.csdnimg.cn/327b582a18e0475790b0bd8d730d7fdb.png"></p><h2 id="数据库恶意下载"><a href="#数据库恶意下载" class="headerlink" title="数据库恶意下载"></a>数据库恶意下载</h2><p>直接访问 &#x2F;db&#x2F;db.mdb 下载文件并用记事本打开，得到flag</p><p><img src="https://img-blog.csdnimg.cn/863e7bb3eea446aa85e641b9186f71c2.png"></p><p><img src="https://img-blog.csdnimg.cn/6a89a19f357d4be595d2ed63bdac4b11.png"></p><p>所有题目结束</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（二）语言基础</title>
      <link href="/2022/04/09/Java%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/04/09/Java%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>​<br>标识符<br>1、什么是标识符？</p><pre><code>    - 在java源程序中凡是程序员有权利自己命名的单词都是标识符    - 在EditPlus编译器中以黑色字体高亮显示    - 标识符可以标识 类名、方法名、变量名、接口名、常量名······</code></pre><p>2、标识符的命名规则【必须按照命名规则的语法来编写，否则编译器会报错】</p><pre><code>    - 一个合法的标识符只能有 数字、字母、下划线_、美元符号$ 组成，不能含有其它符号    - 不能数字开头    - 严格区分字母大小写    - 关键字不能做标识符 （关键字见下文）    - 理论上无长度限制，但是最好不要太长</code></pre><p>3、标识符的命名规范【只是一种规范，不属于语法，不遵守规范编译器不会报错】</p><pre><code>    - 最好见名知意            public class UserService&#123;                    public void login(String username,String password)&#123;                    &#125;            &#125;    - 遵守驼峰命名方式（单词首字母大写，便于区分）            SystemService            UseService            CustomerService    - 类名、接口名：首字母大写，后面每个单词首字母大写。    - 变量名、方法名：首字母小写，后面每个单词首字母大写。    - 常量名：全部大写</code></pre><p>关键字<br>        - 关键字在Java语言中全部是小写<br>        - 关键字在EditPlus编译器中以蓝色高亮显示<br>        - 常见的关键词：<br>                public                class                static                void<br>                if                        for                    while                do<br>                default               byte                  short                int<br>                long                   float                  double              boolean<br>                char                   private              protected          switch<br>                true                    false                 throw                 throws<br>                try                      catch                ······</p><p>字面值<br>        - 常见的字面值：<br>                10（整数型字面值）            3.14（浮点型字面值）                    ‘a’（字符型字面值）<br>                “abc”（字符串型字面值）    false、true（布尔型字面值）          ······<br>        - 字面值就是数据<br>        - 字面值是java源程序的组成部分之一，其还包括标识符，关键字</p><p>变量<br>1、什么是变量？</p><pre><code>    - 变量本质上是内存中的一块空间，这块空间“有数据类型”、“有名字”、“有字面值”。    - 变量包含三部分：数据类型、名称、字面值【数据】    - 变量是内存中储存数据的最基本的单元。</code></pre><p>2、数据类型的作用（起到指导的作用）</p><pre><code>    - 不同的数据有不同的类型，不同的数据类型底层会分配不同大小的哦空间。    - 数据类型可以指导程序在运行阶段应该分配多大的内存空间给变量。</code></pre><p>注意：变量中储存的具体的 “数据” 必须和变量的 “数据类型” 一致，否则编译报错。</p><p>3、声明&#x2F;定义变量的语法格式</p><pre><code>    - 数据类型 + 空格 + 变量名 + ;</code></pre><p>4、变量声明后赋值的语法格式</p><pre><code>    - 变量名 + = + 字面值 + ;</code></pre><p>数据类型<br>1、数据类型的作用</p><pre><code>            程序中当有很多数据，每一个数据都是有相关类型的，不同的数据类型的数据占用空间大小不同。            数据类型的作用是指导JVM在运行的时候给该数据分配多大的内存空间。</code></pre><p>2、基础数据类型</p><pre><code>            - 基本数据类型包括四大类八小种：                    第一类：整数型                            byte、short、int、long                    第二类：浮点型                            float、double                    第三类：布尔型                            boolean                    第四类：字符型                            char                                                   （&#39;\n&#39;在Java中表示一个换行符，属于char类型）                                    （&#39;\t&#39;在Java中表示一个制表符，属于char类型）</code></pre><p>3、引用数据类型（后续补充）</p><pre><code>            - 类            - 接口            - 数据            ··· ···    注意：字符串不属于基本数据类型，属于引用数据类型，而字符属于基本数据类型</code></pre><p>4、基本数据类型各自占用空间的大小</p><p>基本数据类型    占用空间大小【单位：字节】<br>        byte    1<br>        short    2<br>        int    4<br>        long    8<br>        float    4<br>        double    8<br>        boolean    1<br>        char    2<br>5、字节（byte）</p><pre><code>            - 1 Byte = 8 bit  【1个字节 = 8个比特位】                    一个比特位就是一个二进制位，例如一个0，或者一个1            - 1 KB = 1024 Byte            - 1 MB = 1024 KB            - 1 GB = 1024 MB            - 1 TB = 1024 GB    分析：整数型中的Byte类型占用1个字节，也就是8个比特位。                    Byte类型的最大值：01111111也就是【10000000减1】127                    Byte类型的最小值：-128【注意这个在计算机中存的不是11111111】                    Byte类型的取值范围：[-128 ~ 127]，可以表示256个不同的数字【256个二进制】            补充：关于java中的数字类型                    数字都是有正负之分的，所以在数字的二进制当中有一个二进制位称为“符号位”。                    这个“符号位”在所有二进制位的最左边，0便是正数，1表示负数。</code></pre><p>6、System.out.println()和System.out.print()的区别</p><pre><code>    - println()输出之后换行    - print()只输出，不换行            补充：转义字符反斜杠“ \ ”，&#39;\n&#39;表示换行，&#39;\t&#39;表示制表符 </code></pre><p>进制换算<br>        - 十进制转二进制</p><pre><code>            例如98转二进制：                    在64  32  16  8  4  2  1  中98可以看做是64 + 32 + 2，占用对应位为1，其余位为0                    即 1    1    0   0  0  1  0  就是98转换成的二进制            也可以用除2的方法进行换算（知道即可，不必深究）    - 二进制转十进制            例如1101011转十进制：                    此二进制数有7位分别是 64  32  16  8  4  2  1（分别是2的6 5 4 3 2 1 0次方）                    对应位置是1的数相加得到此十进制数为 64 + 32 + 8 + 2 + 1 也就是107</code></pre><p>字符编码<br>        - 最先出现的字符编码方式：ASCII码 （采用一个字节编码）<br>        - 支持简体中文的编码方式：GB2312 &lt; GBK &lt; GB18030<br>        - 支持全国所有文字的编码方式：unicode编码<br>                java语言采用unicode编码方式，所以“标识符”可以用中文。<br>        - 在java根目录上的bin文件下有一个native2ascii.exe命令可以将中文转换成unicode码</p><p>​<img src="https://img-blog.csdnimg.cn/0059c7b3d60849d1b85570f596f78e90.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAc2VyZWlud2U=,size_17,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf（WP）</title>
      <link href="/2022/04/09/ctf%EF%BC%88WP%EF%BC%89/"/>
      <url>/2022/04/09/ctf%EF%BC%88WP%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h4 id="金三胖"><a href="#金三胖" class="headerlink" title="金三胖"></a>金三胖</h4><p>下载解压，直接保存所有图片，看到flag大概是hello hongke经过不断尝试，把字母o改成数字0，加空格该大写什么的，终于知道了原来是hello中间的两个ll是数字11</p><h4 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h4><p>打开二维码，用识别工具识别一下再用010打开这个二维码，可以看到明显的zip文件的格式开头</p><p><img src="https://img-blog.csdnimg.cn/37f97c5aeca4439790a422ba8143a0fe.png"> </p><p>新建一个文件，把这行后面的都cv过去，得到一个新压缩包，打开要我们输密码，提示是4number,直接暴力破解，可以得到密码，进入打开txt文件，得到flag</p><p><img src="https://img-blog.csdnimg.cn/93250cf141ee4c469cf9070b14bbd0fc.png"></p><h4 id="你竟然赶我走"><a href="#你竟然赶我走" class="headerlink" title="你竟然赶我走"></a>你竟然赶我走</h4><p>不知道要干啥，就用010打开压缩包里的图片，直接搜索flag,得到结果</p><h4 id="N种方法解决"><a href="#N种方法解决" class="headerlink" title="N种方法解决"></a>N种方法解决</h4><p>打开压缩包得到exe文件，开始不知道怎么办，网上找到就是找个文本编译器打开就行，刚好我下载的EditPlus直接用这个打开开到这样的文本，不知道干啥直接复制上网搜</p><p><img src="https://img-blog.csdnimg.cn/1a1cc2f9c9404900be7e09bacb89adb4.png"></p><p>得知这是base64和图片的互转码，直接找个<a href="https://tools.kalvinbg.cn/image/base64Image">base64图片在线网址 </a> 得到二维码，识别一下得到flag</p><h4 id="大白"><a href="#大白" class="headerlink" title="大白"></a>大白</h4><p>仔细看看图片什么也没有，看看提示，想想应该是要修改图片的宽和高，010打开直接改第二行的值，把图片改高一点，效果如下</p><p><img src="https://img-blog.csdnimg.cn/ddb178d2eb3f496b88357b675fe42c90.png"> </p><p>得到flag</p><h4 id="基础破解"><a href="#基础破解" class="headerlink" title="基础破解"></a>基础破解</h4><p>打开压缩包里的压缩包，要我们输密码，提示是4位数字密码加密，直接暴力破解，得到密码</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（一）初识Java</title>
      <link href="/2022/04/09/Java%EF%BC%88%E4%B8%80%EF%BC%89%E5%88%9D%E8%AF%86Java/"/>
      <url>/2022/04/09/Java%EF%BC%88%E4%B8%80%EF%BC%89%E5%88%9D%E8%AF%86Java/</url>
      
        <content type="html"><![CDATA[<h3 id="学前准备"><a href="#学前准备" class="headerlink" title="学前准备"></a>学前准备</h3><p>首先是安装一个文本编译器，<a href="https://pan.baidu.com/s/1aBt82_cUv9xXXMjMdhUdcQ%C2%A0">EditPlus</a>，（提取码：xa36）这里是我找的中文版的，下载直接安装就可以了。<br>接着是一些简单的DOS命令：</p><pre><code>    - exit -退出当前DOS命令窗口    - cls -清屏    - dir -列出当前目录下所有的子文件/子目录    - cd 打开相应的文件目录            *格式： cd 目录的路径    - cd .. -回到上级目录    - cd \ -直接回到跟目录    - ipconfig -查看当前ip配置    - del *  -删除相应的文件</code></pre><p>Java是跨平台的，是纯面向对象的，更符合人的思维模式，更容易理解</p><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>（一般在oracle的官网下载即可）</p><p>JDK目录介绍：<br>JDK&#x2F;bin: 该文件下存放了很多命令，例如javac.exe和java.exe<br>javac.exe         负责编译<br>java.exe           负责运行</p><h3 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h3><p>找个地方新建第一个.java 文件<br><img src="https://img-blog.csdnimg.cn/d9fad3db3e474af097188a15188d0520.png"></p><p>并用EditPlus打开，进行开发，看不懂，先照抄<br><img src="https://img-blog.csdnimg.cn/61c11fb5516d48bda6a7c1004a585d8f.png"></p><p>到这里我们已经开发完了HelloWorld.java源文件的开发，接着要用javac工具进行编译<br>要使用javac工具就要我们进行环境变量的配置，<br>简单的讲就是把javac所在的目录配置到系统环境变量path中。</p><h4 id="使用javac命令生成-class文件"><a href="#使用javac命令生成-class文件" class="headerlink" title="使用javac命令生成.class文件"></a>使用javac命令生成.class文件</h4><p>在DOS窗口中输入javac 文件所在目录，生成<br><img src="https://img-blog.csdnimg.cn/e9b9897e4eda43ce9ca5bb2c8c937651.png"></p><p><img src="https://img-blog.csdnimg.cn/cac732b4b1fd4c92a68a8af729745a02.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAc2VyZWlud2U=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h4 id="运行java程序"><a href="#运行java程序" class="headerlink" title="运行java程序"></a>运行java程序</h4><p>测试java命令是否可以用，在.java文件目录下运行java命令，看到输出一个结果，程序结束<br><img src="https://img-blog.csdnimg.cn/071d2fdeeb1d4eca851ed9d3b9051fa9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAc2VyZWlud2U=,size_17,color_FFFFFF,t_70,g_se,x_16"></p><p> java命令：java 类名（注意不是文件全名，是类名，不带后面的.class）</p><h4 id="简单解释程序"><a href="#简单解释程序" class="headerlink" title="简单解释程序"></a>简单解释程序</h4><pre><code>    - 注释 -            出现在java的源程序中，对java源代码的解释说明            注释不会杯编译到.class字节码文件当中            注释可以增强程序的可读性，养成注释的习惯    - 单行注释 - // -            //单行注释，只注释当前行    - 多行注释 - /*  */ -            /*多行注释可以注释多行*/    - javadoc注释 - /** * * * */ -            /**            *        javadoc注释            *         javadoc注释            *         javadoc注释            */            这个注释信息会被javadoc.exe工具解析并生成帮助文档。</code></pre><p>&#x2F;&#x2F;class表示定义一个类<br>&#x2F;&#x2F;Helloworld表示一个类名<br>&#x2F;&#x2F;public表示公开的</p><p>public class Helloworld{&#x2F;&#x2F;定义一个公开的类，类名为Helloworld</p><pre><code>//类体【】//类体中不允许直接编写java语句【除声明变量之外】/*    public 表示公开的    static 表示静态的    void 表示空    main 表示方法名是main    (String[] args) 是一个main方法的形式参数列表*///以下的方法是一个程序的“主方法”，是程序的执行入口public static void main(String[] args)&#123;//表示定义一个公开的静态的主方法    //方法体【】    //方法体【】    //方法体【】    //java语句【java语句一“;”终止，分号必须是半角分号也就是英文下的分号】    //java中所有的“字符串”都使用双引号括起来，使用半角双引号    System.out.println(&quot;Hello World!&quot;);&#125;</code></pre><p>}</p><h4 id="public-class-和-class的区别："><a href="#public-class-和-class的区别：" class="headerlink" title="public class 和 class的区别："></a>public class 和 class的区别：</h4><pre><code>    * 一个java源文件当中可以定义多个class    * 一个java源文件当中public的class不是必须的    * 一个class会定义生成一个xxx.class字节码文件    * 一个java源文件当中定义公开的类型的话，public的class只能有一个，      并且该类名必须和java源文件名称一致    * 每一个class当中都可以编写main方法，都可以设定程序的入口。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试篇</title>
      <link href="/2022/04/08/%E6%B5%8B%E8%AF%95%E7%AF%87/"/>
      <url>/2022/04/08/%E6%B5%8B%E8%AF%95%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>这里会显示为正文。</p><h2 id="这样加标题"><a href="#这样加标题" class="headerlink" title="这样加标题"></a>这样加标题</h2><p>段落与段落之间要有一个空行。</p><p>这样方便读者阅读。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>这样写引用，直接在句子前面加英文的 大于号 即 “&gt;”</p></blockquote><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>在英文状态下输入两种括号，分别是：”[]“和“()”</p><p><a href="https://www.baidu.com/">百度</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>与超链接的区别就是在前面加了一个引文的 感叹号 即“!”</p><p>![百度上的风景图]</p><p>暂时有问题，先跳过</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>在行的前面加上 星号 * 就可以了</p><ul><li>像这样，那个星号就会变成一个点  </li><li>可以多写几个表示无序列表</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>采用<font color =red>数字.</font>的形式表示有序列表</p><ol><li>像这样就是有序列表</li><li>这样可以使文章更有条理按回车就会自动向后面排序列了，再按回车可取消序列排序</li></ol><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><hr><hr><p>像上面这样的分割线需要我们用三个及三个以上的短杠或者星号就可以做到</p><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><pre><code>这里是第一行第二第三</code></pre><p>现在结束代码</p><p>由于前面的失误，导致文件无法更新到远程库，所以我写一句话，来测试一下看看有没有更新。</p><h3 id="网易云音乐测试"><a href="#网易云音乐测试" class="headerlink" title="网易云音乐测试"></a>网易云音乐测试</h3><p>测试成功</p>]]></content>
      
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
